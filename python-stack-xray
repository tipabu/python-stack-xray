#!/bin/bash
#
# Usage: python-stack-xray <pid>
#
# Makes an eventlet- or gevent-based Python process dump all its
# stacks to /tmp/all-stacktraces-<pid>. This is mostly useful for
# debugging.
#
# Requires gdb to be installed.
#
#
# Copyright (c) 2017 SwiftStack, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied.
# See the License for the specific language governing permissions and
# limitations under the License.

""" " 2>/dev/null

set -e

if [ -z "$1" ]; then
	echo "Usage: $0 <pid>"
	exit
fi

PID="$1"
PYFILE=$(readlink -f "$0")

gdb -p "$PID" -batch \
	-eval-command='call (PyGILState_STATE)PyGILState_Ensure()' \
	-eval-command="call (int)PyRun_SimpleString(\"exec(open(\\\""$PYFILE"\\\").read())\")" \
	-eval-command='call (void)PyGILState_Release($1)'


gdbstatus=$?
if [ $gdbstatus -eq 0 ]; then
	echo "Done; look in /tmp/all-stacktraces-$PID"
fi

exit

" """

import gc, greenlet, os, sys, traceback

fname = "/tmp/all-stacktraces-{}".format(os.getpid())
with open(fname, "w") as outfile:
    for ob in gc.get_objects():
        if isinstance(ob, greenlet.greenlet):
            outfile.write("============================== {:X} {} ==============================\n".format(
                id(ob),
                "[dead]" if ob.dead else
                "[not started: {!r}]".format(ob.run) if hasattr(ob, 'run') else
                "[alive but no frames]" if bool(ob) and not ob.gr_frame else
                "[alive]" if bool(ob) else
                "[unknown]"))

            ancestry = []
            gt = ob.parent
            while gt:
                ancestry.append(id(gt))
                gt = gt.parent

            if ancestry:
                outfile.write("Ancestry: {}\n".format(" -> ".join("{:X}".format(a) for a in ancestry)))
            else:
                outfile.write("Ancestry: none (it's a root greenlet)\n")

            if ob.gr_frame:
                traceback.print_stack(ob.gr_frame, file=outfile)

    for thread_id, frame in sys._current_frames().items():
        outfile.write("############################## {:X} ##############################\n".format(
            thread_id))
        traceback.print_stack(frame, file=outfile)
